<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mx = (mouse_x div 32)*32;
my = (mouse_y div 32)*32;

//Scroll Through Objects
var wheelUp = mouse_wheel_up()
var wheelDown = -mouse_wheel_down();

var wheel = wheelUp + wheelDown;

obj += wheel

if (obj &gt; array_length_2d(objects,0)-1) obj = 0;
else if (obj &lt; 0) obj = array_length_2d(objects,0)-1;

//Add Object
    
    //Single
    if (mouse_check_button_pressed(mb_left) &amp;&amp; position_empty(mx,my)){
        addObj(mx,my,objects[obj,0]);
    }

    
    //Multiple
    if (mouse_check_button(mb_left) &amp;&amp; position_empty(mx,my)){
        if (keyboard_check(vk_lshift) &amp;&amp; keyboard_check(vk_lcontrol)){
            addObj(mx,my,objects[obj,0]);
        }
    }
        
//Delete Object

    //Single
    if (mouse_check_button_pressed(mb_right) &amp;&amp; !position_empty(mx,my)){
        delObj(mx,my);
    }
    
    //Multiple
    if (mouse_check_button(mb_right) &amp;&amp; !position_empty(mx,my)){
        if (keyboard_check(vk_lshift)){
            delObj(mx,my);
        }
    }

//Save Level
if (keyboard_check(vk_lcontrol)){
    if (keyboard_check_pressed(ord('S'))){
        saveLevel(false);
    }
}

//Save Level As
if (keyboard_check(vk_lcontrol)){
    if (keyboard_check(vk_shift) &amp;&amp; keyboard_check_pressed(ord('S'))){
        saveLevel(true);
    }
}

//Open Level
if (keyboard_check(vk_lcontrol)){
    if (keyboard_check_pressed(ord('O'))){
        loadLevel(get_string('Enter Level To Load',''));
    }
}

//Delete Level
if (keyboard_check(vk_lcontrol)){
    if (keyboard_check_pressed(vk_delete)){
        deleteLevel(get_string('Enter Level To Delete',''));
    }
}

//Test Level
if (keyboard_check(vk_f5)){
    room_goto(rm_test);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init Room For Editing

//Add Data Structures For Objects
global.object = ds_list_create();
global.objX = ds_list_create();
global.objY = ds_list_create();

//Add Data Structures For Tiles
global.tileBackground = ds_list_create();
global.tileL = ds_list_create();
global.tileR = ds_list_create();
global.tileW = ds_list_create();
global.tileH = ds_list_create();
global.tileX = ds_list_create();
global.tileY = ds_list_create();
global.tileDepth = ds_list_create();

global.loadedLevel = 'none';

/*Add Objects to Arrays
[0,0] = First Item, Object
[0,1] = First Item, Sprite
*/

obj = 0;

//Wall
objects[0,0] = obj_wallMarker;
objects[0,1] = spr_wall;

//Player
objects[1,0] = obj_playerMarker;
objects[1,1] = spr_player;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Cursor
draw_set_alpha(0.5);
if (position_empty(mx,my)){
    draw_sprite(objects[obj,1],0,mx,my);
}
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
